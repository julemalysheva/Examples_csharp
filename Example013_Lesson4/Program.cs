//Урок 4. Рекурсия и двумерные массивы
//String.Empty; по умолчанию инициализация происходит такой константой
string[,] table = new string[2, 5];
table[1, 2] = "слово"; //обращаемся по двум параметрам к элементу массива, в данном случае к строке и далее 
                       //используем как обычную переменную

//нумерация строк и столбцов с 0
//table[0,0]..table[0,1]..table[0,2]..table[0,3]..table[0,4]
//table[1,0]..table[1,1]..table[1,2]..table[1,3]..table[1,4]

//печатаем массив
/*for (int rows = 0; rows < 2; rows++)
{
    for (int columns = 0; columns < 5; columns++)
    {
        Console.Write($"-{table[rows, columns]}-");
    }
}*/

void PrintArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");//выводим элементы строки
        }
        Console.WriteLine();//переводим курсор на новую строку
    }
}

void FillArray(int[,] matr)
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i, j] = new Random().Next(1, 10); //[0,10) полуинтервал, 0 включ, 10 не включает
        }
    }
}

int[,] matrix = new int[3, 4];//инициализация массива
PrintArray(matrix);//применяем ф-цию выводы на экран, убедимся что сразу там 0
Console.WriteLine();
FillArray(matrix);//заполним случайными числами из функции
PrintArray(matrix);//снова выведем на печать

//Если мы посмотрим только на единицы, увидим палец вверх. 
int[,] pic = new int[,] //не обязательно указывать кол-во строк и столбцов, если есть фиксиров.данные
{
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
 {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};

void PrintImage(int[,] image)
{
    for (int i = 0; i < image.GetLength(0); i++)
    {
        for (int j = 0; j < image.GetLength(1); j++)
        {
            if (image[i, j] == 0) Console.Write($" ");
            else
                Console.Write($"+");
        }
        Console.WriteLine();//переводим курсор на новую строку
    }
}

void FillImage(int row, int col)//функция закрашивания картинки, в кач-ве аргументов позицию внутри границы
{
    if (pic[row, col] == 0)  //если пустое
    {
        pic[row, col] = 1;  //красим
        FillImage(row - 1, col); //и рекурсия, повторяем действия в разных направлениях по алгоритму
        FillImage(row, col - 1);
        FillImage(row + 1, col);
        FillImage(row, col + 1);
    }
}

PrintImage(pic);
FillImage(13, 13);
PrintImage(pic);

double Factorial(int n)
{
    if (n == 1) return 1;
    else return n * Factorial(n - 1);
}

for (int i = 1; i < 40; i++)//если использовать int, то идет переполнение типа, т.к. !n функция быстро растущая
{                           // для решения int меняем на double в части возвращаемого значения
    Console.WriteLine($"{i}! = {Factorial(i)}");
}

//След.пример рекурсии - вывод чисел Фибоначи
//f(1)=1
//f(2)=1
//f(3)=f(1)+f(2) и т.д. т.е. f(n) = f(n-1) + f(n-2)

double Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

for (int i = 1; i < 50; i++) //начинает подтупливать с 37-40 очень медленно/можно сделать быстрее или заменить
{
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}

//рекурсивно обойти все папки - изучить api для работы с файловой системы
//на примере игры тетрис двумерные массивы, поле тетриса не что иное как двумерный массив, в нем
//в нем есть 0 - свободные клеточки и 1 - которые заняты фигуркой
//движение фигуры - это всего лишь навсего смещение этих 0 и 1 относительно др.друга
//или прямоуг.табл.цифр - это матрица, их мы можем поворачивать, соотв.поврот фигуры- это поворот матрицы