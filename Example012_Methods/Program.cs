void Method1() // не содержит аргументов
{
    Console.WriteLine("Автор Юля Малышева");//тело метода, ничего не возвращает, 
    //может применяться, например, когда нужно что-то вывести
}
// как вызываются такие методы: Указывается идентификатор и круглые скобки-обязательно , вот так: 
//Method1();
//вид 2
void Method2(string msg) //что-то принимает, но не возвращ.
{
    //тогда в теле мы можем указывать какие-то операторы и использовать те аргументы, которые были приняты методом
    Console.WriteLine(msg);
}
//вызов метода
//Method2("текст сообщения");//выполняет действия заданного метода с переданными в функцию аргументами

//бывает аргументы именнованные, когда явно мы указываем какое значение какому аргументу использовать
//часто нужно, если аргументов больше 1:
void Method21(string msg, int count) //что-то принимает, но не возвращ.
{
    int i = 0;
    while (i < count)
    {
        Console.WriteLine(msg);
        i++;//не забывать менять счетчик, чтоб не получить бесконечный цикл
    }
}
//при зацикливании ctrl+c
//вызов метода:
//Method21("текст",4);
//вызов метода с именнованным указанием аргумента:явно указываем
//Method21(msg: "явно указали текст", count: 4);
//в этом случае необязательно писать их по порядку:
//Method21(count: 4, msg: "другой текст");

//3 вид, что-то возвращают, но ничего не принимают
//если возвращ.-мы должны указать тип данных, знач.кот.ожидаем
int Method3() //аргументы не принимает
{
    return DateTime.Now.Year;
}

//вывод, мы должны через оператор присваивания положить нужное значение в переменную, а потом уже использовать
int Year = Method3(); //положили результат работы метода
//Console.WriteLine(Year);

//4 группа самая важная, что-то принимают и возвращают
/*string Method4(int count, string text) //чтоб переименовать переменные везде, выделяем,правой кнопкой и rename
{
    int i=0; //определяем счетчик
    //string result = ""; //переменная для результата, изначально пустая строка
    string result = string.Empty; //для лучшего понимания определили в начале пустую строку
    while (i<count)
    {
        result = result + text;
        i++;
    }
    return result;
}*/

//через цикл for
string Method4(int count, string text) //чтоб переименовать переменные везде, выделяем,правой кнопкой и rename
{
    string result = string.Empty;
    for (int i = 0; i < count; i++) //данная запись ипользуется чаще всего 95%, цикл взаимозаменяемые
    {
        result = result + text;
    }
    return result;
}
//вызов метода - создаем нужный тип переменной, указываем аргументы
string res = Method4(10, "метод_4 ");
//Console.WriteLine(res);

// цикл в цикле, например, вывод табл.умножения на экран
/*for (int i = 2; i <= 10; i++)
{
    for (int j = 2; j <= 10; j++)
    {
        Console.WriteLine(i + "* " + j + "= " + i * j);
    }
    Console.WriteLine();
}*/

//работа с текстом
/*— Я думаю, — сказал князь, улыбаясь, — что,
ежели бы вас послали вместо нашего милого
Винценгероде, вы бы взяли приступом согласие
прусского короля. Вы так красноречивы. Вы
дадите мне чаю?*/
string text = "— Я думаю, — сказал князь, улыбаясь, — что, "
            + "ежели бы вас послали вместо нашего милого Винценгероде, "
            + "вы бы взяли приступом согласие прусского короля. "
            + "Вы так красноречивы. Вы дадите мне чаю?";

//string s = "qwerty";
//            012345  мы можем обращаться к символам строки через его номер, начиная с 0
//s[3] // r
string Replace(string text, char oldValue, char newValue)
{
    string result = string.Empty;
    int lentch = text.Length;//получаем длину нашей строки из аргумента
    for (int i = 0; i < lentch; i++)
    {
        //если текущий символ строки совпал с тем значением, кот.мы хотим заменить
        if (text[i] == oldValue) result = result + $"{newValue}"; //то добавляем новый символ на замену
        else result = result + $"{text[i]}"; //если нет, то добавляем в результир-ю строку текущий символ
    }

    return result;
}
//запускаем метод
string newText = Replace(text, ' ', '|');//в качестве аргументов передаем в метод нашу ранее определенную переменную 
//с типом строка, символ для поиска и символ для замены/ символы обозначаем одинарными ''кавычками
//Console.WriteLine(newText);
//для след.замены просто вносим новые аргументы в наш метод, используя наш измененный текст newText
//Console.WriteLine();//разделяем вывод пустой строкой
newText = Replace(newText, 'к', 'К'); //здесь уже не указываем тип string, т.к. мы ранее уже это сделали
//Console.WriteLine(newText);//показываем результат
//Console.WriteLine();//разделяем вывод пустой строкой
newText = Replace(newText, 'С', 'с');
//Console.WriteLine(newText);//показываем результат

//упорядочить массив, сортировка выбора
/*1. Найти позицию минимального элемента
в неотсортированной части массива
2. Произвести обмен этого значения со
значением первой неотсортированной позиции
3. Повторять пока есть не отсортированные
элементы*/
int[] arr = { 5, 6, 7, 2, 3, 9, 1, 1 };//задаем массив

void PrintArray(int[] array)
{
    int count = array.Length;
    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} ");
    }
    Console.WriteLine();
}
PrintArray(arr);//выводим работу метода, передавая ему наш заданный выше массив

void SelectoinSort(int[] array)
{
    for (int i = 0; i < array.Length - 1; i++) //во внешнем цикле ставим длина-1,т.к. во внешнем смотрим i+1
    {
        int minPosition = i; //запоминаем текущую позицию, для кот.будем производить дальнейшие действия
                             //здесь идет поиск позиции
        for (int j = i + 1; j < array.Length; j++) //ищем в неотсортированной части массива нужный элемент(мин)
        {
            if (array[j] < array[minPosition]) //если элемент меньше, чем на нашей текущей позиции, то сохраняем/меняем эту позицию
                minPosition = j;
        }
        //здесь замена значений между собой
        int temporary = array[i];//положили в память значение текущего элемента
        array[i] = array[minPosition];//в текущую позицию положили значение найденного элемента
        array[minPosition] = temporary;//обмен местами, кладем сюда временный элемент
    }
}

SelectoinSort(arr);
Console.WriteLine("Сортировка выбором, от мин. к макс.:");
PrintArray(arr);

void SelectoinSortMax(int[] array) //пробую сортировку от макс до мин
{
    for (int i = 0; i < array.Length - 1; i++) //во внешнем цикле ставим длина-1,т.к. во внунтр. смотрим i+1
    {
        int maxPosition = i; //запоминаем текущую позицию, для кот.будем производить дальнейшие действия
                             //здесь идет поиск позиции
        for (int j = i + 1; j < array.Length; j++) //ищем в неотсортированной части массива нужный элемент(макс)
        {
            if (array[j] > array[maxPosition]) //если элемент больше, чем на нашей текущей позиции, 
                maxPosition = j;               //то сохраняем/меняем эту позицию
        }
        //здесь замена значений между собой
        int temporary = array[i];//положили в память значение текущего элемента
        array[i] = array[maxPosition];//в текущую позицию положили значение найденного элемента
        array[maxPosition] = temporary;//обмен местами, кладем сюда временный элемент
    }
}

SelectoinSortMax(arr);
Console.WriteLine("Сортировка выбором, от макс. к мин.:");
PrintArray(arr);

//Подсчет цифр числа/ Если оно целое, то можно циклом деления на 10
//а если нет, то, возможно, перевести в строку и искать в ней цифры от 0 до 9, и/или исключая знаки .,
int CountNumber(int num)
{
    int count = 0;
    while (num / 10 > 0)
    {
        count++;
        num = num / 10;
    }
    return ++count;
}
//пробую проверить
int CountN = CountNumber(585466);
Console.WriteLine(CountN);